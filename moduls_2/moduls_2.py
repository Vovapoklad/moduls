import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import json
import os
from datetime import datetime, timedelta
import hashlib
import pandas as pd
import PyPDF2
import re
import random

class EmployeeSystem:
    def __init__(self):
        self.data_file = "employee_data.json"
        self.users_file = "users.json"
        self.load_data()
        
    def load_data(self):
        if os.path.exists(self.data_file):
            with open(self.data_file, 'r', encoding='utf-8') as f:
                self.employees = json.load(f)
        else:
            self.employees = []
            
        if os.path.exists(self.users_file):
            with open(self.users_file, 'r', encoding='utf-8') as f:
                self.users = json.load(f)
        else:
            self.users = [{
                "login": "admin",
                "password": self.hash_password("admin"),
                "role": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                "is_active": True,
                "login_attempts": 0,
                "last_login": None,
                "must_change_password": True
            }]
            self.save_users()
    
    def save_data(self):
        with open(self.data_file, 'w', encoding='utf-8') as f:
            json.dump(self.employees, f, ensure_ascii=False, indent=4)
            
    def save_users(self):
        with open(self.users_file, 'w', encoding='utf-8') as f:
            json.dump(self.users, f, ensure_ascii=False, indent=4)
    
    def hash_password(self, password):
        return hashlib.sha256(password.encode()).hexdigest()
    
    def verify_password(self, stored_hash, password):
        return stored_hash == self.hash_password(password)

    def validate_email(self, email):
        if not email:
            return False, "Email –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        if ' ' in email:
            return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email"
        
        if any(ord(c) > 127 for c in email):
            return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email"
        

        if email.count('@') != 1:
            return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email"
        
        parts = email.split('@')
        if len(parts) != 2 or not parts[0] or not parts[1]:
            return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email"
        if '.' not in parts[1]:
            return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email"
        
        return True, "Email –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"

class LoginWindow:
    def __init__(self, root):
        self.root = root
        self.root.title("–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏")
        self.system = EmployeeSystem()
        self.current_user = None
        
        self.show_login_form()
    
    def show_login_form(self):
        self.clear_window()
        
        frame = ttk.Frame(self.root, padding="20")
        frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        ttk.Label(frame, text="–õ–æ–≥–∏–Ω:").grid(row=0, column=0, padx=5, pady=5)
        self.login_entry = ttk.Entry(frame)
        self.login_entry.grid(row=0, column=1, padx=5, pady=5)
        
        password_frame = ttk.Frame(frame)
        password_frame.grid(row=1, column=0, columnspan=2, pady=5)
        
        ttk.Label(password_frame, text="–ü–∞—Ä–æ–ª—å:").pack(side=tk.LEFT, padx=5)
        self.password_entry = ttk.Entry(password_frame, show="*")
        self.password_entry.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –ø–∞—Ä–æ–ª—è
        self.show_password_var = tk.BooleanVar(value=False)
        self.show_password_btn = ttk.Checkbutton(
            password_frame, 
            text="üëÅ", 
            variable=self.show_password_var,
            command=self.toggle_password_visibility
        )
        self.show_password_btn.pack(side=tk.LEFT)
        
        ttk.Button(frame, text="–í–æ–π—Ç–∏", command=self.login).grid(row=2, columnspan=2, pady=10)
        ttk.Button(frame, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", command=self.show_register_form).grid(row=3, columnspan=2, pady=5)
        ttk.Button(frame, text="–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", command=self.show_change_password_form).grid(row=4, columnspan=2, pady=5)
    
    def toggle_password_visibility(self):
        if self.show_password_var.get():
            self.password_entry.config(show="")
        else:
            self.password_entry.config(show="*")
    
    def login(self):
        login = self.login_entry.get()
        password = self.password_entry.get()
        
        if not login or not password:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
            return
        
        user = next((u for u in self.system.users if u["login"] == login), None)
        
        if not user:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
            return
        
        if not user["is_active"]:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return
        
        if not self.system.verify_password(user["password"], password):
            user["login_attempts"] += 1
            if user["login_attempts"] >= 3:
                user["is_active"] = False
                self.system.save_users()
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
            return
        
        user["login_attempts"] = 0
        user["last_login"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.system.save_users()
        
        self.current_user = user
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å")
        
        if user["must_change_password"]:
            self.show_change_password_form()
        elif user["role"] == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
            self.show_admin_panel()
        else:
            self.show_user_panel()
    
    def show_register_form(self):
        self.clear_window()
        
        frame = ttk.Frame(self.root, padding="20")
        frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        ttk.Label(frame, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è").grid(row=0, columnspan=2, pady=10)
        
        ttk.Label(frame, text="–õ–æ–≥–∏–Ω:").grid(row=1, column=0, padx=5, pady=5)
        self.register_login = ttk.Entry(frame)
        self.register_login.grid(row=1, column=1, padx=5, pady=5)
        
        ttk.Label(frame, text="Email:").grid(row=2, column=0, padx=5, pady=5)
        self.register_email = ttk.Entry(frame)
        self.register_email.grid(row=2, column=1, padx=5, pady=5)
        
        password_frame = ttk.Frame(frame)
        password_frame.grid(row=3, column=0, columnspan=2, pady=5)
        
        ttk.Label(password_frame, text="–ü–∞—Ä–æ–ª—å:").pack(side=tk.LEFT, padx=5)
        self.register_password = ttk.Entry(password_frame, show="*")
        self.register_password.pack(side=tk.LEFT, padx=5)
        
        self.show_register_password_var = tk.BooleanVar(value=False)
        self.show_register_password_btn = ttk.Checkbutton(
            password_frame, 
            text="üëÅ", 
            variable=self.show_register_password_var,
            command=lambda: self.toggle_register_password_visibility()
        )
        self.show_register_password_btn.pack(side=tk.LEFT)
        
        confirm_frame = ttk.Frame(frame)
        confirm_frame.grid(row=4, column=0, columnspan=2, pady=5)
        
        ttk.Label(confirm_frame, text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:").pack(side=tk.LEFT, padx=5)
        self.register_confirm = ttk.Entry(confirm_frame, show="*")
        self.register_confirm.pack(side=tk.LEFT, padx=5)
        
        self.show_confirm_password_var = tk.BooleanVar(value=False)
        self.show_confirm_password_btn = ttk.Checkbutton(
            confirm_frame, 
            text="üëÅ", 
            variable=self.show_confirm_password_var,
            command=lambda: self.toggle_confirm_password_visibility()
        )
        self.show_confirm_password_btn.pack(side=tk.LEFT)
        
        ttk.Button(frame, text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", command=self.register).grid(row=5, columnspan=2, pady=10)
        ttk.Button(frame, text="–ù–∞–∑–∞–¥", command=self.show_login_form).grid(row=6, columnspan=2)
    
    def toggle_register_password_visibility(self):
        if self.show_register_password_var.get():
            self.register_password.config(show="")
        else:
            self.register_password.config(show="*")

    def toggle_confirm_password_visibility(self):
        if self.show_confirm_password_var.get():
            self.register_confirm.config(show="")
        else:
            self.register_confirm.config(show="*")
    
    def register(self):
        login = self.register_login.get()
        email = self.register_email.get()
        password = self.register_password.get()
        confirm = self.register_confirm.get()
        
        if not login or not password or not confirm or not email:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
            return
        
        is_valid, message = self.system.validate_email(email)
        if not is_valid:
            messagebox.showerror("–û—à–∏–±–∫–∞", message)
            return
        
        if len(password) < 6:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
            return
        
        if password != confirm:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            return
        
        if any(u["login"] == login for u in self.system.users):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        if any(u.get("email") == email for u in self.system.users):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        new_user = {
            "login": login,
            "email": email,
            "password": self.system.hash_password(password),
            "role": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "is_active": True,
            "login_attempts": 0,
            "last_login": None,
            "must_change_password": False
        }
        
        self.system.users.append(new_user)
        self.system.save_users()
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        self.show_login_form()
    
    def show_change_password_form(self):
        self.clear_window()
        
        frame = ttk.Frame(self.root, padding="20")
        frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        ttk.Label(frame, text="–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è").grid(row=0, columnspan=2, pady=10)
        
        ttk.Label(frame, text="–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å:").grid(row=1, column=0, padx=5, pady=5)
        self.current_password = ttk.Entry(frame, show="*")
        self.current_password.grid(row=1, column=1, padx=5, pady=5)
        
        ttk.Label(frame, text="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:").grid(row=2, column=0, padx=5, pady=5)
        self.new_password = ttk.Entry(frame, show="*")
        self.new_password.grid(row=2, column=1, padx=5, pady=5)
        
        ttk.Label(frame, text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è:").grid(row=3, column=0, padx=5, pady=5)
        self.confirm_password = ttk.Entry(frame, show="*")
        self.confirm_password.grid(row=3, column=1, padx=5, pady=5)
        
        ttk.Button(frame, text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", command=self.change_password).grid(row=4, columnspan=2, pady=10)
    
    def change_password(self):
        current = self.current_password.get()
        new = self.new_password.get()
        confirm = self.confirm_password.get()
        
        if not current or not new or not confirm:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
            return
        
        if not self.system.verify_password(self.current_user["password"], current):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ")
            return
        
        if new != confirm:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            return
        
        self.current_user["password"] = self.system.hash_password(new)
        self.current_user["must_change_password"] = False
        self.system.save_users()
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
        
        if self.current_user["role"] == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
            self.show_admin_panel()
        else:
            self.show_user_panel()
    
    def show_admin_panel(self):
        self.clear_window()
        
        frame = ttk.Frame(self.root, padding="20")
        frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        ttk.Label(frame, text=f"–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - {self.current_user['login']}").grid(row=0, columnspan=2, pady=10)
        
        ttk.Button(frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", command=self.show_user_management).grid(row=1, columnspan=2, pady=5)
        ttk.Button(frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏", command=self.show_employee_management).grid(row=2, columnspan=2, pady=5)
        ttk.Button(frame, text="–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", command=self.show_change_password_form).grid(row=3, columnspan=2, pady=5)
        ttk.Button(frame, text="–í—ã—Ö–æ–¥", command=self.logout).grid(row=4, columnspan=2, pady=5)
    
    def show_user_panel(self):
        self.clear_window()
        
        frame = ttk.Frame(self.root, padding="20")
        frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        ttk.Label(frame, text="–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤").grid(row=0, column=0, columnspan=2, pady=5)
        columns = ("–§–ò–û", "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–ü—Ä–æ–µ–∫—Ç")
        tree = ttk.Treeview(frame, columns=columns, show="headings")
        
        for col in columns:
            tree.heading(col, text=col)
            tree.column(col, width=150)
        
        scrollbar = ttk.Scrollbar(frame, orient=tk.VERTICAL, command=tree.yview)
        tree.configure(yscrollcommand=scrollbar.set)
        
        tree.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar.grid(row=1, column=1, sticky=(tk.N, tk.S))
        
        for employee in self.system.employees:
            tree.insert("", "end", values=(
                employee.get("name", ""),
                employee.get("position", ""),
                employee.get("project", "")
            ))
        
        ttk.Label(frame, text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π").grid(row=2, column=0, columnspan=2, pady=5)
        user_columns = ("–õ–æ–≥–∏–Ω", "–†–æ–ª—å", "–°—Ç–∞—Ç—É—Å")
        user_tree = ttk.Treeview(frame, columns=user_columns, show="headings")
        
        for col in user_columns:
            user_tree.heading(col, text=col)
            user_tree.column(col, width=150)
        
        user_scrollbar = ttk.Scrollbar(frame, orient=tk.VERTICAL, command=user_tree.yview)
        user_tree.configure(yscrollcommand=user_scrollbar.set)
        
        user_tree.grid(row=3, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        user_scrollbar.grid(row=3, column=1, sticky=(tk.N, tk.S))
        
        for user in self.system.users:
            status = "–ê–∫—Ç–∏–≤–µ–Ω" if user["is_active"] else "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            user_tree.insert("", "end", values=(user["login"], user["role"], status))
        
        button_frame = ttk.Frame(frame)
        button_frame.grid(row=4, column=0, columnspan=2, pady=10)
        
        ttk.Button(button_frame, text="–û–±–Ω–æ–≤–∏—Ç—å", command=self.show_user_panel).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="–í—ã—Ö–æ–¥", command=self.logout).pack(side=tk.LEFT, padx=5)
    
    def show_user_management(self):
        self.clear_window()
        
        frame = ttk.Frame(self.root, padding="20")
        frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        ttk.Label(frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏").grid(row=0, columnspan=3, pady=10)
        
        columns = ("–õ–æ–≥–∏–Ω", "–†–æ–ª—å", "–°—Ç–∞—Ç—É—Å")
        tree = ttk.Treeview(frame, columns=columns, show="headings")
        
        for col in columns:
            tree.heading(col, text=col)
            tree.column(col, width=100)
        
        for user in self.system.users:
            status = "–ê–∫—Ç–∏–≤–µ–Ω" if user["is_active"] else "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            tree.insert("", "end", values=(user["login"], user["role"], status))
        
        tree.grid(row=1, column=0, columnspan=3, pady=10)
        
        ttk.Button(frame, text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", command=self.show_add_user_form).grid(row=2, column=0, pady=5)
        ttk.Button(frame, text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", command=lambda: self.edit_user(tree.selection())).grid(row=2, column=1, pady=5)
        ttk.Button(frame, text="–ù–∞–∑–∞–¥", command=self.show_admin_panel).grid(row=2, column=2, pady=5)
    
    def show_add_user_form(self):
        self.clear_window()
        
        frame = ttk.Frame(self.root, padding="20")
        frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        ttk.Label(frame, text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è").grid(row=0, columnspan=2, pady=10)
        
        ttk.Label(frame, text="–õ–æ–≥–∏–Ω:").grid(row=1, column=0, padx=5, pady=5)
        self.new_user_login = ttk.Entry(frame)
        self.new_user_login.grid(row=1, column=1, padx=5, pady=5)
        
        ttk.Label(frame, text="–ü–∞—Ä–æ–ª—å:").grid(row=2, column=0, padx=5, pady=5)
        self.new_user_password = ttk.Entry(frame, show="*")
        self.new_user_password.grid(row=2, column=1, padx=5, pady=5)
        
        ttk.Label(frame, text="–†–æ–ª—å:").grid(row=3, column=0, padx=5, pady=5)
        self.new_user_role = ttk.Combobox(frame, values=["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"])
        self.new_user_role.grid(row=3, column=1, padx=5, pady=5)
        self.new_user_role.set("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        ttk.Button(frame, text="–î–æ–±–∞–≤–∏—Ç—å", command=self.add_user).grid(row=4, columnspan=2, pady=10)
        ttk.Button(frame, text="–ù–∞–∑–∞–¥", command=self.show_user_management).grid(row=5, columnspan=2)
    
    def add_user(self):
        login = self.new_user_login.get()
        password = self.new_user_password.get()
        role = self.new_user_role.get()
        
        if not login or not password:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
            return
        
        if any(u["login"] == login for u in self.system.users):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        new_user = {
            "login": login,
            "password": self.system.hash_password(password),
            "role": role,
            "is_active": True,
            "login_attempts": 0,
            "last_login": None,
            "must_change_password": True
        }
        
        self.system.users.append(new_user)
        self.system.save_users()
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        self.show_user_management()
    
    def edit_user(self, selection):
        if not selection:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        selected_item = selection[0]
        user_login = self.system.users[selected_item]["login"]
        
        user = next((u for u in self.system.users if u["login"] == user_login), None)
        if not user:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        self.clear_window()
        
        frame = ttk.Frame(self.root, padding="20")
        frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        ttk.Label(frame, text=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['login']}").grid(row=0, columnspan=2, pady=10)
        
        self.edit_user_active = tk.BooleanVar(value=user["is_active"])
        ttk.Checkbutton(frame, text="–ê–∫—Ç–∏–≤–µ–Ω", variable=self.edit_user_active).grid(row=1, columnspan=2, pady=5)
        
        ttk.Label(frame, text="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å):").grid(row=2, columnspan=2, pady=5)
        self.edit_user_password = ttk.Entry(frame, show="*")
        self.edit_user_password.grid(row=3, columnspan=2, pady=5)
        
        ttk.Button(frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=lambda: self.save_user_changes(user)).grid(row=4, columnspan=2, pady=10)
        ttk.Button(frame, text="–ù–∞–∑–∞–¥", command=self.show_user_management).grid(row=5, columnspan=2)
    
    def save_user_changes(self, user):
        user["is_active"] = self.edit_user_active.get()
        
        new_password = self.edit_user_password.get()
        if new_password:
            user["password"] = self.system.hash_password(new_password)
            user["must_change_password"] = True
        
        self.system.save_users()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        self.show_user_management()
    
    def show_employee_management(self):
        self.clear_window()
        
        frame = ttk.Frame(self.root, padding="20")
        frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        ttk.Label(frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏").grid(row=0, columnspan=3, pady=10)
        
        columns = ("–§–ò–û", "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–ü—Ä–æ–µ–∫—Ç")
        self.employee_tree = ttk.Treeview(frame, columns=columns, show="headings")
        
        for col in columns:
            self.employee_tree.heading(col, text=col)
            self.employee_tree.column(col, width=150)
        
        scrollbar = ttk.Scrollbar(frame, orient=tk.VERTICAL, command=self.employee_tree.yview)
        self.employee_tree.configure(yscrollcommand=scrollbar.set)
        
        self.employee_tree.grid(row=1, column=0, columnspan=3, pady=10)
        scrollbar.grid(row=1, column=3, sticky=(tk.N, tk.S))
        
        self.update_employee_table()
        
        button_frame = ttk.Frame(frame)
        button_frame.grid(row=2, column=0, columnspan=3, pady=10)
        
        ttk.Button(button_frame, text="–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", command=self.show_add_employee_form).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="–ò–º–ø–æ—Ä—Ç Excel", command=self.import_from_excel).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="–ò–º–ø–æ—Ä—Ç PDF", command=self.import_from_pdf).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="–ù–∞–∑–∞–¥", command=self.show_admin_panel).pack(side=tk.LEFT, padx=5)

    def update_employee_table(self):
        for item in self.employee_tree.get_children():
            self.employee_tree.delete(item)
        
        for employee in self.system.employees:
            self.employee_tree.insert("", "end", values=(
                employee.get("name", ""),
                employee.get("position", ""),
                employee.get("project", "")
            ))

    def import_from_excel(self):
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª",
            filetypes=[("Excel files", "*.xlsx *.xls")]
        )
        
        if not file_path:
            return
        
        try:
            df = pd.read_excel(file_path)
            
            required_columns = ["–§–ò–û", "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–ü—Ä–æ–µ–∫—Ç", "–ß–∞—Å—ã"]
            if not all(col in df.columns for col in required_columns):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: –§–ò–û, –î–æ–ª–∂–Ω–æ—Å—Ç—å, –ü—Ä–æ–µ–∫—Ç, –ß–∞—Å—ã")
                return
            
            new_employees = []
            for _, row in df.iterrows():
                employee = {
                    "name": str(row["–§–ò–û"]),
                    "position": str(row["–î–æ–ª–∂–Ω–æ—Å—Ç—å"]),
                    "project": str(row["–ü—Ä–æ–µ–∫—Ç"]),
                    "project_hours": float(row["–ß–∞—Å—ã"]),
                    "weekly_hours": 40  
                }
                new_employees.append(employee)
            
            self.system.employees.extend(new_employees)
            self.system.save_data()
            
            self.update_employee_table()
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(new_employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞: {str(e)}")

    def import_from_pdf(self):
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª",
            filetypes=[("PDF files", "*.pdf")]
        )
        
        if not file_path:
            return
        
        try:
            with open(file_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                
                text = ""
                for page in pdf_reader.pages:
                    text += page.extract_text()
                

                lines = text.split('\n')
                new_employees = []
                
                for line in lines:

                    parts = [p.strip() for p in line.split() if p.strip()]
                    if len(parts) >= 4:  
                        try:
                            employee = {
                                "name": parts[0] + " " + parts[1],      
                                "position": parts[2],  
                                "project": parts[3],  
                                "project_hours": float(parts[4]) if len(parts) > 4 else 0,  
                                "weekly_hours": 40  
                            }
                            new_employees.append(employee)
                        except (ValueError, IndexError):
                            continue
                
                if new_employees:
                    self.system.employees.extend(new_employees)
                    self.system.save_data()
                    
                    self.update_employee_table()
                    
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(new_employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
                else:
                    messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ PDF —Ñ–∞–π–ª–µ")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞: {str(e)}")
    
    def logout(self):
        self.current_user = None
        self.show_login_form()
    
    def clear_window(self):
        for widget in self.root.winfo_children():
            widget.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    app = LoginWindow(root)
    root.mainloop()